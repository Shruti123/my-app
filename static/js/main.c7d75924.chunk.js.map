{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","mode","setMode","btnText","setText","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","border","Navbar","props","href","title","aria-label","aria-current","role","toggleMode","htmlFor","TextForm","txt","heading","value","onChange","event","target","rows","newString","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","newTxt","split","join","length","Alert","alert","msg","defaultProps","App","setAlert","showAlert","message","typ","setTimeout","body","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c7d75924.chunk.js","sourcesContent":["import React from 'react'\nimport { useState } from 'react'\n\n\nexport default function About() {\n    const [mode,setMode] = useState( \n        {\n            color :'black',\n            backgroundColor: 'white'\n        });\n     const [btnText, setText] = useState('Enable Dark Mode');\n\n     const _toggleMode = ()=> {\n        if(mode.color === 'white'){\n            setMode({\n                color: 'black',\n                backgroundColor: 'white'\n            });\n            setText('Enable Dark Mode');\n        }else {\n            setMode({\n                color: 'white',\n                backgroundColor: 'black',\n                border: '1 px solid white'\n            });\n            setText('Enable Light Mode');\n        }\n    }\n    return (\n        <div className=\"container\" style={mode}>\n        <h1>About Us</h1>\n        <div className=\"accordion my-3\" id=\"accordionExample\" >\n  <div className=\"accordion-item\">\n    <h2 className=\"accordion-header\" id=\"headingOne\">\n      <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" \n      data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={mode}>\n         Accordion Item #1\n      </button>\n    </h2>\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n      <div className=\"accordion-body\" style={mode}>\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n      </div>\n    </div>\n  </div>\n  <div className=\"accordion-item\" >\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\n      <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\"\n       data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={mode}>\n        Accordion Item #2\n      </button>\n    </h2>\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n      <div className=\"accordion-body\" style={mode}>\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n      </div>\n    </div>\n  </div>\n  <div className=\"accordion-item\" >\n    <h2 className=\"accordion-header\" id=\"headingThree\">\n      <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\"\n       data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={mode}>\n        Accordion Item #3\n      </button>\n    </h2>\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\n      <div className=\"accordion-body\" style={mode}>\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n      </div>\n    </div>\n  </div>\n</div>\n<div className=\"container\">\n<button className=\"btn btn-primary\" onClick={_toggleMode} >{btnText}</button>\n</div>\n</div>\n    );\n\n   \n}\n","import React from 'react'\nimport Proptypes from 'prop-types'\n//import {Link} from 'react-router-dom';\n\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n        <div className=\"container-fluid\">\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n          {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\n           */}\n           <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              <li className=\"nav-item\">\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n              </li>\n             {/*  <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/about\">About</Link>\n              </li> */}\n              </ul>\n              <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n            <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" onClick= {props.toggleMode} id=\"flexSwitchCheckDefault\"/>\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n</div>\n          </div>\n        </div>\n      </nav>\n    );\n}\n\nNavbar.propTypes = {\n    title:Proptypes.string.isRequired};\nNavbar.defaultProps = {\n    title:'This is my default value'\n}","import React from 'react'\nimport { useState } from 'react'\n\n\nexport default function TextForm(props) {\n    const [txt, setText] = useState(\"\");\n    const onChange = (event)=> {\n        setText(event.target.value);     \n     }\n \n     const toUprCase = ()=> {\n         let newString = txt.toUpperCase();\n         setText(newString);\n         \n     }\n \n     const toLowCase = ()=> {\n         let newString = txt.toLowerCase();\n         setText(newString);\n     }\n \n     const clearTxt = ()=> {\n         setText('');\n     }\n \n     const copyText = ()=> {\n       let txt = document.getElementById('myBox');\n       txt.select();\n       navigator.clipboard.writeText(txt.value);\n     }\n\n     const handleExtraSpace = ()=> {\n        let newTxt = txt.split(/[ ]+/);\n        setText(newTxt.join(\" \"));\n    \n     }\n     \n\n    return (\n        <>\n        <h1 style={{color: props.mode==='light'?'black':'white'}}>{props.heading}</h1>\n        <div className=\"mb-3\" >\n        <textarea className=\"form-control\" value={txt} id=\"myBox\" onChange= {onChange}  rows=\"8\" \n        style={{color:props.mode==='light'?'black':'white',backgroundColor : props.mode==='light'? 'white':'#092f54'}}></textarea>\n        <button className=\"btn btn-primary my-3\" onClick={toUprCase}>Convert to UpperCase</button>\n        <button className=\"btn btn-primary mx-3\" onClick={toLowCase}>Convert to Lower Case</button>\n        <button className=\"btn btn-primary mx-3\" onClick={clearTxt}>Clear Text</button>\n        <button className=\"btn btn-primary mx-3\" onClick={copyText}>Copy Text</button>\n        <button className=\"btn btn-primary mx-3\" onClick={handleExtraSpace}>Remove Extra Space</button>\n        </div>\n        <div className=\"container my-2\" style={{color:props.mode==='light'?'black':'white',\n        backgroundColor : props.mode==='light'? 'white':'#092f54'}}>\n            <h2>Your Text Summary</h2>\n            <p>{txt.split(' ').length} words and {txt.length} characters</p>\n            <p>{txt.length*0.008} minutes read </p>\n            <h2>Preview</h2>\n            <p>{txt.length>0?txt:\"Write something to show\"}</p>\n        </div>\n        </>\n    \n    );\n    \n}\n\n\n","import React from 'react'\n\nexport default function Alert(props) {\n    return (\n       props.alert && <div className={`alert alert-${props.alert.type}`} role=\"alert\">{props.alert.msg}\n           </div>\n    );\n}\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, typ)=> {\n    setAlert({\n      msg: message,\n      type:typ\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = ()=> {\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#092f54';\n      showAlert(\"Dark Mode has been enabled\",'success');\n      //document.title = 'TextUtils-DarkMode';\n    }else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been enabled\",'warning');\n     // document.title = 'TextUtils-LightMode';\n    }\n  }\n  return (\n    <>\n    <Router>\n    <Navbar title =\"TextUtils\" mode={mode} toggleMode = {toggleMode}/>\n     <Alert alert={alert}/>\n     <div className=\"container my-3\">\n     <Routes>\n          <Route path=\"/about\" element={<About />}/>\n             <Route path=\"/\" element={\n             <TextForm heading=\"Enter the text to analyze below\" mode = {mode} alert={alert}/> } /> \n        </Routes>\n        </div>\n    </Router>     \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}